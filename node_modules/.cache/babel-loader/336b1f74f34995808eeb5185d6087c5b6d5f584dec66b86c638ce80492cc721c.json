{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\si.izzo\\\\Desktop\\\\multiagent-platform-ui\\\\src\\\\components\\\\WorkspaceManager.jsx\",\n  _s = $RefreshSig$();\n// components/WorkspaceManager.jsx\nimport React, { useCallback } from 'react';\nimport ReactFlow, { Controls, Background, useNodesState, useEdgesState, MiniMap } from 'reactflow';\nimport 'reactflow/dist/style.css';\nimport { AgentNode } from './nodes/AgentNode';\nimport { ConnectionLine } from './edges/ConnectionLine';\nimport { NavigationPanel } from './NavigationPanel';\n\n// Register custom node types\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst nodeTypes = {\n  agent: AgentNode\n};\n\n// Register custom edge types\nconst edgeTypes = {\n  custom: ConnectionLine\n};\nexport const WorkspaceManager = ({\n  agents,\n  connections,\n  selectedAgent,\n  workspaceConfig,\n  onAgentSelect,\n  onAgentUpdate,\n  onAgentDelete,\n  onConnectionCreate,\n  onConnectionDelete,\n  onWorkspaceConfig\n}) => {\n  _s();\n  // Convert our agents to ReactFlow nodes\n  const initialNodes = agents.map(agent => ({\n    id: agent.id,\n    type: 'agent',\n    position: agent.position,\n    data: {\n      ...agent,\n      isSelected: agent.id === selectedAgent,\n      onSelect: () => onAgentSelect(agent.id),\n      onDelete: () => onAgentDelete(agent.id)\n    }\n  }));\n\n  // Convert our connections to ReactFlow edges\n  const initialEdges = connections.map(connection => ({\n    id: connection.id,\n    source: connection.source,\n    target: connection.target,\n    type: 'custom',\n    data: {\n      ...connection,\n      onDelete: () => onConnectionDelete(connection.id)\n    }\n  }));\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n  const [edges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n\n  // Update nodes when agents change\n  React.useEffect(() => {\n    setNodes(agents.map(agent => ({\n      id: agent.id,\n      type: 'agent',\n      position: agent.position,\n      data: {\n        ...agent,\n        isSelected: agent.id === selectedAgent,\n        onSelect: () => onAgentSelect(agent.id),\n        onDelete: () => onAgentDelete(agent.id)\n      }\n    })));\n  }, [agents, selectedAgent, onAgentSelect, onAgentDelete, setNodes]);\n\n  // Update edges when connections change\n  React.useEffect(() => {\n    setEdges(connections.map(connection => ({\n      id: connection.id,\n      source: connection.source,\n      target: connection.target,\n      type: 'custom',\n      data: {\n        ...connection,\n        onDelete: () => onConnectionDelete(connection.id)\n      }\n    })));\n  }, [connections, onConnectionDelete, setEdges]);\n\n  // Handle node position changes\n  const onNodeDragStop = useCallback((event, node) => {\n    onAgentUpdate(node.id, {\n      position: node.position\n    });\n  }, [onAgentUpdate]);\n\n  // Handle new connections\n  const onConnect = useCallback(params => {\n    onConnectionCreate(params.source, params.target);\n  }, [onConnectionCreate]);\n\n  // Handle zoom changes\n  const onMoveEnd = useCallback((_, viewport) => {\n    onWorkspaceConfig({\n      zoom: viewport.zoom,\n      panX: viewport.x,\n      panY: viewport.y\n    });\n  }, [onWorkspaceConfig]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex-1 h-full relative\",\n    children: [/*#__PURE__*/_jsxDEV(ReactFlow, {\n      nodes: nodes,\n      edges: edges,\n      onNodesChange: onNodesChange,\n      onEdgesChange: onEdgesChange,\n      onNodeDragStop: onNodeDragStop,\n      onConnect: onConnect,\n      onMoveEnd: onMoveEnd,\n      nodeTypes: nodeTypes,\n      edgeTypes: edgeTypes,\n      defaultZoom: workspaceConfig.zoom,\n      defaultPosition: [workspaceConfig.panX, workspaceConfig.panY],\n      snapToGrid: workspaceConfig.snapToGrid,\n      snapGrid: [20, 20],\n      fitView: true,\n      children: [/*#__PURE__*/_jsxDEV(Background, {\n        color: \"#aaa\",\n        gap: 20,\n        size: 1,\n        visible: workspaceConfig.showGrid\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Controls, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MiniMap, {\n        nodeColor: node => {\n          return node.data.isSelected ? '#ff0072' : '#eee';\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(NavigationPanel, {\n      config: workspaceConfig,\n      onConfigChange: onWorkspaceConfig\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 115,\n    columnNumber: 5\n  }, this);\n};\n_s(WorkspaceManager, \"egP8/AzwgS5nHTHKkr2YYYStmVM=\", false, function () {\n  return [useNodesState, useEdgesState];\n});\n_c = WorkspaceManager;\nvar _c;\n$RefreshReg$(_c, \"WorkspaceManager\");","map":{"version":3,"names":["React","useCallback","ReactFlow","Controls","Background","useNodesState","useEdgesState","MiniMap","AgentNode","ConnectionLine","NavigationPanel","jsxDEV","_jsxDEV","nodeTypes","agent","edgeTypes","custom","WorkspaceManager","agents","connections","selectedAgent","workspaceConfig","onAgentSelect","onAgentUpdate","onAgentDelete","onConnectionCreate","onConnectionDelete","onWorkspaceConfig","_s","initialNodes","map","id","type","position","data","isSelected","onSelect","onDelete","initialEdges","connection","source","target","nodes","setNodes","onNodesChange","edges","setEdges","onEdgesChange","useEffect","onNodeDragStop","event","node","onConnect","params","onMoveEnd","_","viewport","zoom","panX","x","panY","y","className","children","defaultZoom","defaultPosition","snapToGrid","snapGrid","fitView","color","gap","size","visible","showGrid","fileName","_jsxFileName","lineNumber","columnNumber","nodeColor","config","onConfigChange","_c","$RefreshReg$"],"sources":["C:/Users/si.izzo/Desktop/multiagent-platform-ui/src/components/WorkspaceManager.jsx"],"sourcesContent":["// components/WorkspaceManager.jsx\nimport React, { useCallback } from 'react';\nimport ReactFlow, { \n  Controls, \n  Background, \n  useNodesState, \n  useEdgesState,\n  MiniMap\n} from 'reactflow';\nimport 'reactflow/dist/style.css';\n\nimport { AgentNode } from './nodes/AgentNode';\nimport { ConnectionLine } from './edges/ConnectionLine';\nimport { NavigationPanel } from './NavigationPanel';\n\n// Register custom node types\nconst nodeTypes = {\n  agent: AgentNode,\n};\n\n// Register custom edge types\nconst edgeTypes = {\n  custom: ConnectionLine,\n};\n\nexport const WorkspaceManager = ({\n  agents,\n  connections,\n  selectedAgent,\n  workspaceConfig,\n  onAgentSelect,\n  onAgentUpdate,\n  onAgentDelete,\n  onConnectionCreate,\n  onConnectionDelete,\n  onWorkspaceConfig,\n}) => {\n  // Convert our agents to ReactFlow nodes\n  const initialNodes = agents.map(agent => ({\n    id: agent.id,\n    type: 'agent',\n    position: agent.position,\n    data: { \n      ...agent,\n      isSelected: agent.id === selectedAgent,\n      onSelect: () => onAgentSelect(agent.id),\n      onDelete: () => onAgentDelete(agent.id),\n    },\n  }));\n\n  // Convert our connections to ReactFlow edges\n  const initialEdges = connections.map(connection => ({\n    id: connection.id,\n    source: connection.source,\n    target: connection.target,\n    type: 'custom',\n    data: {\n      ...connection,\n      onDelete: () => onConnectionDelete(connection.id),\n    },\n  }));\n\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n  const [edges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n\n  // Update nodes when agents change\n  React.useEffect(() => {\n    setNodes(agents.map(agent => ({\n      id: agent.id,\n      type: 'agent',\n      position: agent.position,\n      data: { \n        ...agent,\n        isSelected: agent.id === selectedAgent,\n        onSelect: () => onAgentSelect(agent.id),\n        onDelete: () => onAgentDelete(agent.id),\n      },\n    })));\n  }, [agents, selectedAgent, onAgentSelect, onAgentDelete, setNodes]);\n\n  // Update edges when connections change\n  React.useEffect(() => {\n    setEdges(connections.map(connection => ({\n      id: connection.id,\n      source: connection.source,\n      target: connection.target,\n      type: 'custom',\n      data: {\n        ...connection,\n        onDelete: () => onConnectionDelete(connection.id),\n      },\n    })));\n  }, [connections, onConnectionDelete, setEdges]);\n\n  // Handle node position changes\n  const onNodeDragStop = useCallback((event, node) => {\n    onAgentUpdate(node.id, { position: node.position });\n  }, [onAgentUpdate]);\n\n  // Handle new connections\n  const onConnect = useCallback((params) => {\n    onConnectionCreate(params.source, params.target);\n  }, [onConnectionCreate]);\n\n  // Handle zoom changes\n  const onMoveEnd = useCallback((_, viewport) => {\n    onWorkspaceConfig({ \n      zoom: viewport.zoom,\n      panX: viewport.x,\n      panY: viewport.y,\n    });\n  }, [onWorkspaceConfig]);\n\n  return (\n    <div className=\"flex-1 h-full relative\">\n      <ReactFlow\n        nodes={nodes}\n        edges={edges}\n        onNodesChange={onNodesChange}\n        onEdgesChange={onEdgesChange}\n        onNodeDragStop={onNodeDragStop}\n        onConnect={onConnect}\n        onMoveEnd={onMoveEnd}\n        nodeTypes={nodeTypes}\n        edgeTypes={edgeTypes}\n        defaultZoom={workspaceConfig.zoom}\n        defaultPosition={[workspaceConfig.panX, workspaceConfig.panY]}\n        snapToGrid={workspaceConfig.snapToGrid}\n        snapGrid={[20, 20]}\n        fitView\n      >\n        <Background \n          color=\"#aaa\" \n          gap={20} \n          size={1}\n          visible={workspaceConfig.showGrid} \n        />\n        <Controls />\n        <MiniMap \n          nodeColor={(node) => {\n            return node.data.isSelected ? '#ff0072' : '#eee';\n          }}\n        />\n      </ReactFlow>\n      \n      <NavigationPanel \n        config={workspaceConfig}\n        onConfigChange={onWorkspaceConfig}\n      />\n    </div>\n  );\n};"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,WAAW,QAAQ,OAAO;AAC1C,OAAOC,SAAS,IACdC,QAAQ,EACRC,UAAU,EACVC,aAAa,EACbC,aAAa,EACbC,OAAO,QACF,WAAW;AAClB,OAAO,0BAA0B;AAEjC,SAASC,SAAS,QAAQ,mBAAmB;AAC7C,SAASC,cAAc,QAAQ,wBAAwB;AACvD,SAASC,eAAe,QAAQ,mBAAmB;;AAEnD;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,SAAS,GAAG;EAChBC,KAAK,EAAEN;AACT,CAAC;;AAED;AACA,MAAMO,SAAS,GAAG;EAChBC,MAAM,EAAEP;AACV,CAAC;AAED,OAAO,MAAMQ,gBAAgB,GAAGA,CAAC;EAC/BC,MAAM;EACNC,WAAW;EACXC,aAAa;EACbC,eAAe;EACfC,aAAa;EACbC,aAAa;EACbC,aAAa;EACbC,kBAAkB;EAClBC,kBAAkB;EAClBC;AACF,CAAC,KAAK;EAAAC,EAAA;EACJ;EACA,MAAMC,YAAY,GAAGX,MAAM,CAACY,GAAG,CAAChB,KAAK,KAAK;IACxCiB,EAAE,EAAEjB,KAAK,CAACiB,EAAE;IACZC,IAAI,EAAE,OAAO;IACbC,QAAQ,EAAEnB,KAAK,CAACmB,QAAQ;IACxBC,IAAI,EAAE;MACJ,GAAGpB,KAAK;MACRqB,UAAU,EAAErB,KAAK,CAACiB,EAAE,KAAKX,aAAa;MACtCgB,QAAQ,EAAEA,CAAA,KAAMd,aAAa,CAACR,KAAK,CAACiB,EAAE,CAAC;MACvCM,QAAQ,EAAEA,CAAA,KAAMb,aAAa,CAACV,KAAK,CAACiB,EAAE;IACxC;EACF,CAAC,CAAC,CAAC;;EAEH;EACA,MAAMO,YAAY,GAAGnB,WAAW,CAACW,GAAG,CAACS,UAAU,KAAK;IAClDR,EAAE,EAAEQ,UAAU,CAACR,EAAE;IACjBS,MAAM,EAAED,UAAU,CAACC,MAAM;IACzBC,MAAM,EAAEF,UAAU,CAACE,MAAM;IACzBT,IAAI,EAAE,QAAQ;IACdE,IAAI,EAAE;MACJ,GAAGK,UAAU;MACbF,QAAQ,EAAEA,CAAA,KAAMX,kBAAkB,CAACa,UAAU,CAACR,EAAE;IAClD;EACF,CAAC,CAAC,CAAC;EAEH,MAAM,CAACW,KAAK,EAAEC,QAAQ,EAAEC,aAAa,CAAC,GAAGvC,aAAa,CAACwB,YAAY,CAAC;EACpE,MAAM,CAACgB,KAAK,EAAEC,QAAQ,EAAEC,aAAa,CAAC,GAAGzC,aAAa,CAACgC,YAAY,CAAC;;EAEpE;EACAtC,KAAK,CAACgD,SAAS,CAAC,MAAM;IACpBL,QAAQ,CAACzB,MAAM,CAACY,GAAG,CAAChB,KAAK,KAAK;MAC5BiB,EAAE,EAAEjB,KAAK,CAACiB,EAAE;MACZC,IAAI,EAAE,OAAO;MACbC,QAAQ,EAAEnB,KAAK,CAACmB,QAAQ;MACxBC,IAAI,EAAE;QACJ,GAAGpB,KAAK;QACRqB,UAAU,EAAErB,KAAK,CAACiB,EAAE,KAAKX,aAAa;QACtCgB,QAAQ,EAAEA,CAAA,KAAMd,aAAa,CAACR,KAAK,CAACiB,EAAE,CAAC;QACvCM,QAAQ,EAAEA,CAAA,KAAMb,aAAa,CAACV,KAAK,CAACiB,EAAE;MACxC;IACF,CAAC,CAAC,CAAC,CAAC;EACN,CAAC,EAAE,CAACb,MAAM,EAAEE,aAAa,EAAEE,aAAa,EAAEE,aAAa,EAAEmB,QAAQ,CAAC,CAAC;;EAEnE;EACA3C,KAAK,CAACgD,SAAS,CAAC,MAAM;IACpBF,QAAQ,CAAC3B,WAAW,CAACW,GAAG,CAACS,UAAU,KAAK;MACtCR,EAAE,EAAEQ,UAAU,CAACR,EAAE;MACjBS,MAAM,EAAED,UAAU,CAACC,MAAM;MACzBC,MAAM,EAAEF,UAAU,CAACE,MAAM;MACzBT,IAAI,EAAE,QAAQ;MACdE,IAAI,EAAE;QACJ,GAAGK,UAAU;QACbF,QAAQ,EAAEA,CAAA,KAAMX,kBAAkB,CAACa,UAAU,CAACR,EAAE;MAClD;IACF,CAAC,CAAC,CAAC,CAAC;EACN,CAAC,EAAE,CAACZ,WAAW,EAAEO,kBAAkB,EAAEoB,QAAQ,CAAC,CAAC;;EAE/C;EACA,MAAMG,cAAc,GAAGhD,WAAW,CAAC,CAACiD,KAAK,EAAEC,IAAI,KAAK;IAClD5B,aAAa,CAAC4B,IAAI,CAACpB,EAAE,EAAE;MAAEE,QAAQ,EAAEkB,IAAI,CAAClB;IAAS,CAAC,CAAC;EACrD,CAAC,EAAE,CAACV,aAAa,CAAC,CAAC;;EAEnB;EACA,MAAM6B,SAAS,GAAGnD,WAAW,CAAEoD,MAAM,IAAK;IACxC5B,kBAAkB,CAAC4B,MAAM,CAACb,MAAM,EAAEa,MAAM,CAACZ,MAAM,CAAC;EAClD,CAAC,EAAE,CAAChB,kBAAkB,CAAC,CAAC;;EAExB;EACA,MAAM6B,SAAS,GAAGrD,WAAW,CAAC,CAACsD,CAAC,EAAEC,QAAQ,KAAK;IAC7C7B,iBAAiB,CAAC;MAChB8B,IAAI,EAAED,QAAQ,CAACC,IAAI;MACnBC,IAAI,EAAEF,QAAQ,CAACG,CAAC;MAChBC,IAAI,EAAEJ,QAAQ,CAACK;IACjB,CAAC,CAAC;EACJ,CAAC,EAAE,CAAClC,iBAAiB,CAAC,CAAC;EAEvB,oBACEf,OAAA;IAAKkD,SAAS,EAAC,wBAAwB;IAAAC,QAAA,gBACrCnD,OAAA,CAACV,SAAS;MACRwC,KAAK,EAAEA,KAAM;MACbG,KAAK,EAAEA,KAAM;MACbD,aAAa,EAAEA,aAAc;MAC7BG,aAAa,EAAEA,aAAc;MAC7BE,cAAc,EAAEA,cAAe;MAC/BG,SAAS,EAAEA,SAAU;MACrBE,SAAS,EAAEA,SAAU;MACrBzC,SAAS,EAAEA,SAAU;MACrBE,SAAS,EAAEA,SAAU;MACrBiD,WAAW,EAAE3C,eAAe,CAACoC,IAAK;MAClCQ,eAAe,EAAE,CAAC5C,eAAe,CAACqC,IAAI,EAAErC,eAAe,CAACuC,IAAI,CAAE;MAC9DM,UAAU,EAAE7C,eAAe,CAAC6C,UAAW;MACvCC,QAAQ,EAAE,CAAC,EAAE,EAAE,EAAE,CAAE;MACnBC,OAAO;MAAAL,QAAA,gBAEPnD,OAAA,CAACR,UAAU;QACTiE,KAAK,EAAC,MAAM;QACZC,GAAG,EAAE,EAAG;QACRC,IAAI,EAAE,CAAE;QACRC,OAAO,EAAEnD,eAAe,CAACoD;MAAS;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACnC,CAAC,eACFjE,OAAA,CAACT,QAAQ;QAAAuE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eACZjE,OAAA,CAACL,OAAO;QACNuE,SAAS,EAAG3B,IAAI,IAAK;UACnB,OAAOA,IAAI,CAACjB,IAAI,CAACC,UAAU,GAAG,SAAS,GAAG,MAAM;QAClD;MAAE;QAAAuC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACO,CAAC,eAEZjE,OAAA,CAACF,eAAe;MACdqE,MAAM,EAAE1D,eAAgB;MACxB2D,cAAc,EAAErD;IAAkB;MAAA+C,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACnC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV,CAAC;AAACjD,EAAA,CA9HWX,gBAAgB;EAAA,QAqCcZ,aAAa,EACbC,aAAa;AAAA;AAAA2E,EAAA,GAtC3ChE,gBAAgB;AAAA,IAAAgE,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}